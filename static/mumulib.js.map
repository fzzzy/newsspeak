{
  "version": 3,
  "sources": ["../../node_modules/object-path/index.js", "../../src/patslot.ts", "../../node_modules/morphdom/dist/morphdom-esm.js", "../../src/state.ts", "../../src/dialog.ts"],
  "sourcesContent": ["(function (root, factory) {\n  'use strict'\n\n  /*istanbul ignore next:cant test*/\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory()\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory)\n  } else {\n    // Browser globals\n    root.objectPath = factory()\n  }\n})(this, function () {\n  'use strict'\n\n  var toStr = Object.prototype.toString\n\n  function hasOwnProperty (obj, prop) {\n    if (obj == null) {\n      return false\n    }\n    //to handle objects with null prototypes (too edge case?)\n    return Object.prototype.hasOwnProperty.call(obj, prop)\n  }\n\n  function isEmpty (value) {\n    if (!value) {\n      return true\n    }\n    if (isArray(value) && value.length === 0) {\n      return true\n    } else if (typeof value !== 'string') {\n      for (var i in value) {\n        if (hasOwnProperty(value, i)) {\n          return false\n        }\n      }\n      return true\n    }\n    return false\n  }\n\n  function toString (type) {\n    return toStr.call(type)\n  }\n\n  function isObject (obj) {\n    return typeof obj === 'object' && toString(obj) === '[object Object]'\n  }\n\n  var isArray = Array.isArray || function (obj) {\n    /*istanbul ignore next:cant test*/\n    return toStr.call(obj) === '[object Array]'\n  }\n\n  function isBoolean (obj) {\n    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]'\n  }\n\n  function getKey (key) {\n    var intKey = parseInt(key)\n    if (intKey.toString() === key) {\n      return intKey\n    }\n    return key\n  }\n\n  function factory (options) {\n    options = options || {}\n\n    var objectPath = function (obj) {\n      return Object.keys(objectPath).reduce(function (proxy, prop) {\n        if (prop === 'create') {\n          return proxy\n        }\n\n        /*istanbul ignore else*/\n        if (typeof objectPath[prop] === 'function') {\n          proxy[prop] = objectPath[prop].bind(objectPath, obj)\n        }\n\n        return proxy\n      }, {})\n    }\n\n    var hasShallowProperty\n    if (options.includeInheritedProps) {\n      hasShallowProperty = function () {\n        return true\n      }\n    } else {\n      hasShallowProperty = function (obj, prop) {\n        return (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop)\n      }\n    }\n\n    function getShallowProperty (obj, prop) {\n      if (hasShallowProperty(obj, prop)) {\n        return obj[prop]\n      }\n    }\n\n    var getShallowPropertySafely\n    if (options.includeInheritedProps) {\n      getShallowPropertySafely = function (obj, currentPath) {\n        if (typeof currentPath !== 'string' && typeof currentPath !== 'number') {\n          currentPath = String(currentPath)\n        }\n        var currentValue = getShallowProperty(obj, currentPath)\n        if (currentPath === '__proto__' || currentPath === 'prototype' ||\n          (currentPath === 'constructor' && typeof currentValue === 'function')) {\n          throw new Error('For security reasons, object\\'s magic properties cannot be set')\n        }\n        return currentValue\n      }\n    } else {\n      getShallowPropertySafely = function (obj, currentPath) {\n        return getShallowProperty(obj, currentPath)\n      }\n    }\n\n    function set (obj, path, value, doNotReplace) {\n      if (typeof path === 'number') {\n        path = [path]\n      }\n      if (!path || path.length === 0) {\n        return obj\n      }\n      if (typeof path === 'string') {\n        return set(obj, path.split('.').map(getKey), value, doNotReplace)\n      }\n      var currentPath = path[0]\n      var currentValue = getShallowPropertySafely(obj, currentPath)\n      if (path.length === 1) {\n        if (currentValue === void 0 || !doNotReplace) {\n          obj[currentPath] = value\n        }\n        return currentValue\n      }\n\n      if (currentValue === void 0) {\n        //check if we assume an array\n        if (typeof path[1] === 'number') {\n          obj[currentPath] = []\n        } else {\n          obj[currentPath] = {}\n        }\n      }\n\n      return set(obj[currentPath], path.slice(1), value, doNotReplace)\n    }\n\n    objectPath.has = function (obj, path) {\n      if (typeof path === 'number') {\n        path = [path]\n      } else if (typeof path === 'string') {\n        path = path.split('.')\n      }\n\n      if (!path || path.length === 0) {\n        return !!obj\n      }\n\n      for (var i = 0; i < path.length; i++) {\n        var j = getKey(path[i])\n\n        if ((typeof j === 'number' && isArray(obj) && j < obj.length) ||\n          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {\n          obj = obj[j]\n        } else {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    objectPath.ensureExists = function (obj, path, value) {\n      return set(obj, path, value, true)\n    }\n\n    objectPath.set = function (obj, path, value, doNotReplace) {\n      return set(obj, path, value, doNotReplace)\n    }\n\n    objectPath.insert = function (obj, path, value, at) {\n      var arr = objectPath.get(obj, path)\n      at = ~~at\n      if (!isArray(arr)) {\n        arr = []\n        objectPath.set(obj, path, arr)\n      }\n      arr.splice(at, 0, value)\n    }\n\n    objectPath.empty = function (obj, path) {\n      if (isEmpty(path)) {\n        return void 0\n      }\n      if (obj == null) {\n        return void 0\n      }\n\n      var value, i\n      if (!(value = objectPath.get(obj, path))) {\n        return void 0\n      }\n\n      if (typeof value === 'string') {\n        return objectPath.set(obj, path, '')\n      } else if (isBoolean(value)) {\n        return objectPath.set(obj, path, false)\n      } else if (typeof value === 'number') {\n        return objectPath.set(obj, path, 0)\n      } else if (isArray(value)) {\n        value.length = 0\n      } else if (isObject(value)) {\n        for (i in value) {\n          if (hasShallowProperty(value, i)) {\n            delete value[i]\n          }\n        }\n      } else {\n        return objectPath.set(obj, path, null)\n      }\n    }\n\n    objectPath.push = function (obj, path /*, values */) {\n      var arr = objectPath.get(obj, path)\n      if (!isArray(arr)) {\n        arr = []\n        objectPath.set(obj, path, arr)\n      }\n\n      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2))\n    }\n\n    objectPath.coalesce = function (obj, paths, defaultValue) {\n      var value\n\n      for (var i = 0, len = paths.length; i < len; i++) {\n        if ((value = objectPath.get(obj, paths[i])) !== void 0) {\n          return value\n        }\n      }\n\n      return defaultValue\n    }\n\n    objectPath.get = function (obj, path, defaultValue) {\n      if (typeof path === 'number') {\n        path = [path]\n      }\n      if (!path || path.length === 0) {\n        return obj\n      }\n      if (obj == null) {\n        return defaultValue\n      }\n      if (typeof path === 'string') {\n        return objectPath.get(obj, path.split('.'), defaultValue)\n      }\n\n      var currentPath = getKey(path[0])\n      var nextObj = getShallowPropertySafely(obj, currentPath)\n      if (nextObj === void 0) {\n        return defaultValue\n      }\n\n      if (path.length === 1) {\n        return nextObj\n      }\n\n      return objectPath.get(obj[currentPath], path.slice(1), defaultValue)\n    }\n\n    objectPath.del = function del (obj, path) {\n      if (typeof path === 'number') {\n        path = [path]\n      }\n\n      if (obj == null) {\n        return obj\n      }\n\n      if (isEmpty(path)) {\n        return obj\n      }\n      if (typeof path === 'string') {\n        return objectPath.del(obj, path.split('.'))\n      }\n\n      var currentPath = getKey(path[0])\n      getShallowPropertySafely(obj, currentPath)\n      if (!hasShallowProperty(obj, currentPath)) {\n        return obj\n      }\n\n      if (path.length === 1) {\n        if (isArray(obj)) {\n          obj.splice(currentPath, 1)\n        } else {\n          delete obj[currentPath]\n        }\n      } else {\n        return objectPath.del(obj[currentPath], path.slice(1))\n      }\n\n      return obj\n    }\n\n    return objectPath\n  }\n\n  var mod = factory()\n  mod.create = factory\n  mod.withInheritedProps = factory({includeInheritedProps: true})\n  return mod\n})\n", "/**\n * Patslot Module API Documentation\n *\n * This module provides functions and types for working with HTML templates and slots.\n *\n * Types:\n * - Pattern: A type representing a pattern that can be an HTMLElement, an array of patterns, a generator of patterns, or a string.\n *\n * Functions:\n * - fill_body(slots: { [key: string]: Pattern }): void\n *   Fills the document body with the provided slots and updates the DOM.\n *\n * - fill_slots(node: HTMLElement, slotname: string, pat: Pattern): void\n *   Fills the specified slots in the given node with the provided pattern.\n *\n * - append_to_slots(node: HTMLElement, slotname: string, pat: Pattern): void\n *   Appends the specified pattern to the given slots in the node.\n *\n * - clone_pat(patname: string, slots: { [key: string]: Pattern }): HTMLElement\n *   Clones the specified pattern and fills its slots with the provided patterns.\n *\n * Classes:\n * - Template: A class that takes a URL parameter and provides a clone_pat method.\n */\n\nimport morphdom from \"morphdom\";\n\nconst TEMPLATE = document.body.cloneNode(true) as HTMLElement;\n\ntype SyncPattern = HTMLElement |\n    (HTMLElement | Generator<Pattern> | AsyncGenerator<Pattern> | string)[] |\n    Generator<Pattern> | AsyncGenerator<Pattern> |\n    string |\n    number;\n\ntype Pattern = Promise<SyncPattern> | SyncPattern;\n\nclass Template {\n    url: string;\n\n    constructor(url: string) {\n        this.url = url;\n    }\n\n    async clone_pat(patname: string, slots: { [key: string]: Pattern }): Promise<HTMLElement> {\n        let template;\n        if (this.url === \"\") {\n            template = TEMPLATE;\n        } else {\n            const response = await fetch(this.url);\n            const text = await response.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, \"text/html\");\n            template = doc.body;\n        }\n\n        const pat = template.querySelector(`[data-pat=${patname}]`);\n        if (!pat) {\n            throw new Error(`No pat named ${patname}`);\n        }\n        const clone = pat.cloneNode(true) as HTMLElement;\n        for (const [slotname, pat2] of Object.entries(slots)) {\n            await fill_slots(clone, slotname, pat2);\n        }\n        return clone;\n    }\n}\n\nasync function fill_body(slots: { [key: string]: Pattern }) {\n    const clone = document.body.cloneNode(true) as HTMLElement;\n    for (const [slotname, pat2] of Object.entries(slots)) {\n        await fill_slots(clone, slotname, pat2);\n    }\n    morphdom(document.body, clone);\n}\n\nasync function fill_slots(\n    node: HTMLElement,\n    slotname: string,\n    pat: Pattern\n) {\n    await _fill_or_append_slots(node, slotname, pat, false);\n}\n\n\nasync function append_to_slots(\n    node: HTMLElement,\n    slotname: string,\n    pat: Pattern\n) {\n    await _fill_or_append_slots(node, slotname, pat, true);\n}\n\n\nasync function _fill_or_append_slots(\n    node: HTMLElement,\n    slotname: string,\n    pat: Pattern,\n    append: boolean\n) {\n    let slots: HTMLElement[] | Element[] | NodeListOf<Element> = [];\n    if (node.dataset.slot == slotname) {\n        slots = [node];\n    } else {\n        slots = node.querySelectorAll(`[data-slot=${slotname}]`);\n    }\n    let calculated_slot: (Element | string)[] = [];\n    if (pat instanceof Promise) {\n        pat = await pat;\n    }\n    for (const slot of slots) {\n        // console.log(\"got a slots\", slot, pat);\n        if (pat instanceof Element) {\n            if (append) {\n                slot.appendChild(pat.cloneNode(true) as Element);\n            } else {\n                pat.dataset.slot = slotname;\n                slot.replaceWith(pat.cloneNode(true) as Element);\n            }\n        } else if (\n            pat instanceof Array ||\n            (typeof pat === 'object' &&\n                'next' in pat &&\n                'throw' in pat)) {\n            if (!append) {\n                while (slot.firstChild) {\n                    0\n                    slot.removeChild(slot.firstChild);\n                }\n            }\n            if (calculated_slot.length !== 0) {\n                for (const p of calculated_slot) {\n                    if (p instanceof Element) {\n                        slot.appendChild(p.cloneNode(true) as Element);\n                    } else {\n                        slot.appendChild(document.createTextNode(p));\n                    }\n                }\n            } else {\n                if (typeof pat[Symbol.asyncIterator] === 'function') {\n                    for await (const p of pat) {\n                        if (p instanceof Element) {\n                            calculated_slot.push(p);\n                            slot.appendChild(p.cloneNode(true) as Element);\n                        } else {\n                            calculated_slot.push(p.toString());\n                            slot.appendChild(document.createTextNode(p.toString()));\n                        }\n                    }\n                } else {\n                    for (let p of pat as Generator<Pattern>) {\n                        if (p instanceof Promise) {\n                            p = await p;\n                        }\n                        if (p instanceof Element) {\n                            calculated_slot.push(p);\n                            slot.appendChild(p.cloneNode(true) as Element);\n                        } else {\n                            calculated_slot.push(p.toString());\n                            slot.appendChild(document.createTextNode(p.toString()));\n                        }\n                    }\n                }\n            }\n        } else {\n            if (append) {\n                slot.textContent += (pat === undefined) ? \"undefined\" : pat.toString();\n            } else {\n                slot.textContent = (pat === undefined) ? \"undefined\" : pat.toString();\n            }\n        }\n    }\n    let attrslots: HTMLElement[] | Element[] | NodeListOf<Element> = [];\n    if (node.dataset.attr) {\n        attrslots = [node];\n    }\n    attrslots = [...attrslots, ...node.querySelectorAll(`[data-attr]`)];\n\n    for (const attrslot of attrslots) {\n        const attrs = (attrslot as HTMLElement).dataset.attr || '';\n        //console.log(\"attrs\", attrs);\n        const mappings = attrs.split(',');\n        const results: Promise<void>[] = mappings.map(async (mapping) => {\n            const [attribute_name, attribute_slot] = mapping.split('=');\n            //console.log(\"attribute_slot\", attribute_slot, slotname);\n            if (attribute_slot != slotname) {\n                return;\n            }\n            if (pat instanceof Element) {\n                throw new Error(\"Can't set attr to Element\");\n            } else if (\n                pat instanceof Array ||\n                (typeof pat === 'object' &&\n                    'next' in pat &&\n                    'throw' in pat)) {\n                let patstr = \"\";\n                if (typeof pat[Symbol.asyncIterator] === 'function') {\n                for await (const p of pat) {\n                    if (p instanceof Element) {\n                        throw new Error(\"Can't set attr to Element\");\n                    } else {\n                        patstr += p.toString();\n                    }\n                }\n            } else {\n                for (const p of pat as Generator<Pattern>) {\n                    if (p instanceof Element) {\n                        throw new Error(\"Can't set attr to Element\");\n                    } else {\n                        patstr += p.toString();\n                    }\n                }\n\n            }\n                attrslot.setAttribute(attribute_name, patstr);\n            } else {\n                attrslot.setAttribute(attribute_name, pat.toString());\n            }\n        });\n        await Promise.all(results);\n    }\n}\n\nasync function clone_pat(\n    patname: string,\n    slots: { [key: string]: Pattern }\n): Promise<HTMLElement> {\n    const template = new Template(\"\");\n    return await template.clone_pat(patname, slots);\n}\n\nexport { clone_pat, fill_slots, fill_body, append_to_slots, Pattern, Template };\n", "var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n    return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n  return function morphdom(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof toNode === 'string') {\n      if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement('html');\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n      toNode = toNode.firstElementChild;\n    }\n\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var skipFromChildren = options.skipFromChildren || noop;\n    var addChild = options.addChild || function(parent, child){ return parent.appendChild(child); };\n    var childrenOnly = options.childrenOnly === true;\n\n    // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n    var fromNodesLookup = Object.create(null);\n    var keyedRemovalList = [];\n\n    function addKeyedRemoval(key) {\n      keyedRemovalList.push(key);\n    }\n\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n        while (curChild) {\n\n          var key = undefined;\n\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            // If we are skipping keyed nodes then we add the key\n            // to a list so that it can be handled at the very end.\n            addKeyedRemoval(key);\n          } else {\n            // Only report the node as discarded if it is not keyed. We do this because\n            // at the end we loop through all keyed elements that were unmatched\n            // and then discard them in one final pass.\n            onNodeDiscarded(curChild);\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    /**\n    * Removes a DOM node out of the original DOM\n    *\n    * @param  {Node} node The node to remove\n    * @param  {Node} parentNode The nodes parent\n    * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n    * @return {undefined}\n    */\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    }\n\n    // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n    // function indexTree(root) {\n    //     var treeWalker = document.createTreeWalker(\n    //         root,\n    //         NodeFilter.SHOW_ELEMENT);\n    //\n    //     var el;\n    //     while((el = treeWalker.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n    //\n    // function indexTree(node) {\n    //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n    //     var el;\n    //     while((el = nodeIterator.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n        var curChild = node.firstChild;\n        while (curChild) {\n          var key = getNodeKey(curChild);\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          }\n\n          // Walk recursively\n          indexTree(curChild);\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    indexTree(fromNode);\n\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n\n      var curChild = el.firstChild;\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n\n        var key = getNodeKey(curChild);\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n          // if we find a duplicate #id node in cache, replace `el` with cache value\n          // and morph it to the child node.\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          } else {\n            handleNodeAdded(curChild);\n          }\n        } else {\n          // recursively call for curChild and it's children to see if we find something in\n          // fromNodesLookup\n          handleNodeAdded(curChild);\n        }\n\n        curChild = nextSibling;\n      }\n    }\n\n    function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n      // We have processed all of the \"to nodes\". If curFromNodeChild is\n      // non-null then we still have some from nodes left over that need\n      // to be removed\n      while (curFromNodeChild) {\n        var fromNextSibling = curFromNodeChild.nextSibling;\n        if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n          // Since the node is keyed it might be matched up later so we defer\n          // the actual removal to later\n          addKeyedRemoval(curFromNodeKey);\n        } else {\n          // NOTE: we skip nested keyed nodes from being removed since there is\n          //       still a chance they will be matched up later\n          removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n        }\n        curFromNodeChild = fromNextSibling;\n      }\n    }\n\n    function morphEl(fromEl, toEl, childrenOnly) {\n      var toElKey = getNodeKey(toEl);\n\n      if (toElKey) {\n        // If an element with an ID is being morphed then it will be in the final\n        // DOM so clear it out of the saved elements collection\n        delete fromNodesLookup[toElKey];\n      }\n\n      if (!childrenOnly) {\n        // optional\n        var beforeUpdateResult = onBeforeElUpdated(fromEl, toEl);\n        if (beforeUpdateResult === false) {\n          return;\n        } else if (beforeUpdateResult instanceof HTMLElement) {\n          fromEl = beforeUpdateResult;\n          // reindex the new fromEl in case it's not in the same\n          // tree as the original fromEl\n          // (Phoenix LiveView sometimes returns a cloned tree,\n          //  but keyed lookups would still point to the original tree)\n          indexTree(fromEl);\n        }\n\n        // update attributes on original DOM element first\n        morphAttrs(fromEl, toEl);\n        // optional\n        onElUpdated(fromEl);\n\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n\n      if (fromEl.nodeName !== 'TEXTAREA') {\n        morphChildren(fromEl, toEl);\n      } else {\n        specialElHandlers.TEXTAREA(fromEl, toEl);\n      }\n    }\n\n    function morphChildren(fromEl, toEl) {\n      var skipFrom = skipFromChildren(fromEl, toEl);\n      var curToNodeChild = toEl.firstChild;\n      var curFromNodeChild = fromEl.firstChild;\n      var curToNodeKey;\n      var curFromNodeKey;\n\n      var fromNextSibling;\n      var toNextSibling;\n      var matchingFromEl;\n\n      // walk the children\n      outer: while (curToNodeChild) {\n        toNextSibling = curToNodeChild.nextSibling;\n        curToNodeKey = getNodeKey(curToNodeChild);\n\n        // walk the fromNode children all the way through\n        while (!skipFrom && curFromNodeChild) {\n          fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          curFromNodeKey = getNodeKey(curFromNodeChild);\n\n          var curFromNodeType = curFromNodeChild.nodeType;\n\n          // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n          var isCompatible = undefined;\n\n          if (curFromNodeType === curToNodeChild.nodeType) {\n            if (curFromNodeType === ELEMENT_NODE) {\n              // Both nodes being compared are Element nodes\n\n              if (curToNodeKey) {\n                // The target node has a key so we want to match it up with the correct element\n                // in the original DOM tree\n                if (curToNodeKey !== curFromNodeKey) {\n                  // The current element in the original DOM tree does not have a matching key so\n                  // let's check our lookup to see if there is a matching element in the original\n                  // DOM tree\n                  if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                    if (fromNextSibling === matchingFromEl) {\n                      // Special case for single element removals. To avoid removing the original\n                      // DOM node out of the tree (since that can break CSS transitions, etc.),\n                      // we will instead discard the current node and wait until the next\n                      // iteration to properly match up the keyed target element with its matching\n                      // element in the original tree\n                      isCompatible = false;\n                    } else {\n                      // We found a matching keyed element somewhere in the original DOM tree.\n                      // Let's move the original DOM node into the current position and morph\n                      // it.\n\n                      // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                      // the `removeNode()` function for the node that is being discarded so that\n                      // all lifecycle hooks are correctly invoked\n                      fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                      // fromNextSibling = curFromNodeChild.nextSibling;\n\n                      if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                      } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                      }\n\n                      curFromNodeChild = matchingFromEl;\n                      curFromNodeKey = getNodeKey(curFromNodeChild);\n                    }\n                  } else {\n                    // The nodes are not compatible since the \"to\" node has a key and there\n                    // is no matching keyed node in the source tree\n                    isCompatible = false;\n                  }\n                }\n              } else if (curFromNodeKey) {\n                // The original has a key\n                isCompatible = false;\n              }\n\n              isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n              if (isCompatible) {\n                // We found compatible DOM elements so transform\n                // the current \"from\" node to match the current\n                // target DOM node.\n                // MORPH\n                morphEl(curFromNodeChild, curToNodeChild);\n              }\n\n            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n              // Both nodes being compared are Text or Comment nodes\n              isCompatible = true;\n              // Simply update nodeValue on the original node to\n              // change the text value\n              if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n              }\n\n            }\n          }\n\n          if (isCompatible) {\n            // Advance both the \"to\" child and the \"from\" child since we found a match\n            // Nothing else to do as we already recursively called morphChildren above\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          // No compatible match so remove the old node from the DOM and continue trying to find a\n          // match in the original DOM. However, we only do this if the from node is not keyed\n          // since it is possible that a keyed node might match up with a node somewhere else in the\n          // target tree and we don't want to discard it just yet since it still might find a\n          // home in the final DOM tree. After everything is done we will remove any keyed nodes\n          // that didn't find a home\n          if (curFromNodeKey) {\n            // Since the node is keyed it might be matched up later so we defer\n            // the actual removal to later\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            // NOTE: we skip nested keyed nodes from being removed since there is\n            //       still a chance they will be matched up later\n            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n          }\n\n          curFromNodeChild = fromNextSibling;\n        } // END: while(curFromNodeChild) {}\n\n        // If we got this far then we did not find a candidate match for\n        // our \"to node\" and we exhausted all of the children \"from\"\n        // nodes. Therefore, we will just append the current \"to\" node\n        // to the end\n        if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n          // MORPH\n          if(!skipFrom){ addChild(fromEl, matchingFromEl); }\n          morphEl(matchingFromEl, curToNodeChild);\n        } else {\n          var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n          if (onBeforeNodeAddedResult !== false) {\n            if (onBeforeNodeAddedResult) {\n              curToNodeChild = onBeforeNodeAddedResult;\n            }\n\n            if (curToNodeChild.actualize) {\n              curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n            }\n            addChild(fromEl, curToNodeChild);\n            handleNodeAdded(curToNodeChild);\n          }\n        }\n\n        curToNodeChild = toNextSibling;\n        curFromNodeChild = fromNextSibling;\n      }\n\n      cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    } // END: morphChildren(...)\n\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n\n    if (!childrenOnly) {\n      // Handle the case where we are given two DOM nodes that are not\n      // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          // Going from an element node to a text node\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n\n          return morphedNode;\n        } else {\n          // Text node to something else\n          morphedNode = toNode;\n        }\n      }\n    }\n\n    if (morphedNode === toNode) {\n      // The \"to node\" was not compatible with the \"from node\" so we had to\n      // toss out the \"from node\" and use the \"to node\"\n      onNodeDiscarded(fromNode);\n    } else {\n      if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n        return;\n      }\n\n      morphEl(morphedNode, toNode, childrenOnly);\n\n      // We now need to loop over any keyed nodes that might need to be\n      // removed. We only do the removal if we know that the keyed node\n      // never found a match. When a keyed node is matched up we remove\n      // it out of fromNodesLookup and we use fromNodesLookup to determine\n      // if a keyed node has been matched up or not\n      if (keyedRemovalList) {\n        for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      }\n      // If we had to swap out the from node with a new node because the old\n      // node was not compatible with the target node then we need to\n      // replace the old DOM node in the original DOM tree. This is only\n      // possible if the original DOM node was part of a DOM tree which\n      // we know is the case if it has a parent node.\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n\n    return morphedNode;\n  };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n", "/**\n * State Module API Documentation\n *\n * This module provides functions and types for managing application state.\n *\n * Types:\n * - State: A type representing the application state as an object with string keys and any values.\n * - OnStateChange: A type representing a callback function that is called when the state changes. The callback takes the new state.\n *\n * Functions:\n * - onstate(onstatechange: OnStateChange)\n *   Registers a callback function to be called when the state changes.\n *\n * - set_state(nstate: State)\n *   Updates the application state with the provided new state and notifies registered callbacks. The new top level keys are merged with the old top level keys.\n *\n * - state: State\n *   The current application state.\n * \n * - debug(mode: boolean)\n *   Whether or not to log the current application state on changes.\n * \n */\n\nimport { set, get } from \"object-path\";\n\ntype State = { [key: string]: any } | any;\ntype OnStateChange = (state: State) => Promise<void>;\n\nconst initialValues = {};\nconst obs: OnStateChange[] = [];\nlet loaded = false;\nlet state: State = {};\nlet setting = 0;\nlet dirty = false;\nlet debug_mode = false;\n\nfunction debug(mode) {\n  debug_mode = mode;\n}\n\nasync function onstate(onstatechange: OnStateChange) {\n  if (loaded) {\n    await onstatechange(state);\n  }\n  obs.push(onstatechange);\n}\n\nasync function _set_state(root: any, path: string, nstate: State): Promise<void> {\n  let changed = false;\n  if (nstate === null) {\n    changed = true;\n  } else {\n    if (!path) {\n      for (const [k, v] of Object.entries(nstate)) {\n        if (root[k] !== v) {\n          if (v === undefined) {\n            delete root[k];\n          } else {\n            root[k] = v;\n            changed = true;\n          }\n        }\n      }\n    } else {\n      const old = get(root, path);\n      if (old !== nstate) {\n        set(root, path, nstate);\n        changed = true;\n      }\n    }  \n  }\n  if (!changed) {\n    return;\n  }\n  setting++;\n  if (setting === 1) {\n    update_dom_state(state);\n    if (debug_mode) {\n      document.body.dataset.state = JSON.stringify(state);\n      console.log(\"onstatechange\", state);\n    }\n    for (const onstatechange of obs) {\n      await onstatechange(state);\n    }\n  } else {\n    dirty = true;\n  }\n  setting--;\n  if (setting === 0 && dirty) {\n    dirty = false;\n    window.requestAnimationFrame(() => set_state(null));\n  }\n}\n\nasync function set_state(nstate: State): Promise<void> {\n  await _set_state(state, \"\", nstate);\n}\n\nasync function _set_path(root: any, path: string, nstate: State): Promise<void> {\n  await _set_state(root, path, nstate);\n}\n\nasync function set_path(path: string, nstate: State): Promise<void> {\n  await _set_path(state, path, nstate);\n}\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n  loaded = true;\n  await set_state(null);\n});\n\ndocument.addEventListener('focus', function (e) {\n  if (\n    e.target &&\n    e.target instanceof HTMLInputElement\n  ) {\n    initialValues[e.target.name] = e.target.value;\n  }\n}, true);\n\n\nfunction possibly_changed(e: Event) {\n  let target;\n  if (e.target) {\n    if (e.target instanceof HTMLInputElement) {\n      target = e.target as HTMLInputElement;  \n    } else if (e.target instanceof HTMLSelectElement) {\n      target = e.target as HTMLSelectElement;\n    } else if (e.target instanceof HTMLTextAreaElement) {\n      target = e.target as HTMLTextAreaElement;\n    }\n    if (!target.name || !target.value) {\n      return;\n    }\n  }\n  let name = target.name;\n  let value = target.value;\n  if (initialValues[name] === value) {\n    return;\n  }\n  //console.log('Input event fired:', e.target.name, e.target.value);\n  if (name.substring(0, 5) === 'this.') {\n    set(state, name.substring(5), value);\n    console.log(`${name} = ${JSON.stringify(value)}`);\n    set_state(null);\n  } else if (name.substring(0, 9) === 'selected.') {\n    // should state['selected'] be prefixed with \"this.\" for consistency\n    const selected = get(state, state['selected']);\n    console.log(\"selected\", selected);\n    set(selected, name.substring(9), value);\n    if (debug_mode) {\n      console.log(`${name} = ${JSON.stringify(value)}`);\n    }\n    set_state(null);\n  } else if (name === \"selected\") {\n    set(state, \"selected\", value);\n    set_state(null);\n  }\n}\n\ndocument.addEventListener('focusout', function (e: Event) {\n  //console.log('blur event fired:', e);\n  if (\n    e.target &&\n    (e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement)\n  ) {\n    possibly_changed(e);\n  }\n}, true);\n\ndocument.addEventListener('change', function (e: Event) {\n  //console.log('blur event fired:', e);\n  if (\n    e.target &&\n    ((e.target instanceof HTMLInputElement &&\n    e.target.type === \"radio\") ||\n    e.target instanceof HTMLSelectElement)\n  ) {\n    possibly_changed(e);\n  }\n}, true);\n\nasync function update_dom_state(state: State) {\n  const elements = document.querySelectorAll('input, select, textarea');\n  elements.forEach((element) => {\n    let el;\n    if (element instanceof HTMLInputElement) {\n      el = element as HTMLInputElement;\n    } else if (element instanceof HTMLSelectElement) {\n      el = element as HTMLSelectElement;\n    } else if (element instanceof HTMLTextAreaElement) {\n      el = element as HTMLTextAreaElement;\n    }\n    const name = el.name;\n    if (name.startsWith('this.')) {\n      const value = get(state, name.slice(5));\n      if (el.value !== value) {\n        el.value = value;\n      }\n    } else if (name.startsWith('selected.')) {\n      const selectedState = get(state, state[\"selected\"]);\n      const value = get(selectedState, name.slice(9));\n      if (el.value !== value) {\n        el.value = value;\n      }\n    } else if (name === \"selected\") {\n      const sel = state[\"selected\"];\n      if (el.type === \"radio\") {\n        if (el.value === sel) {\n          el.checked = true;\n        } else {\n          el.checked = false\n        }  \n      } else {\n        el.value = sel;\n      }\n    }\n  });\n}\n\nexport { onstate, set_state, set_path, state, debug };\n", "/**\n * Dialog Module API Documentation\n *\n * This module provides functions for handling dialog interactions.\n *\n * Functions:\n * - do_dialog(dialog_name: string, path: string, render: (el: HTMLElement, state: object) => HTMLElement): void\n *   Opens a dialog, renders its content, and handles form submissions.\n *\n *   Parameters:\n *   - dialog_name: The ID of the dialog element to be opened.\n *   - path: The path to the state object to be used for rendering the dialog.\n *   - render: A function that takes an HTMLElement and a state object, and returns an HTMLElement representing the rendered dialog content.\n *\n *   Return value:\n *   - void\n */\n\nimport { set, get } from \"object-path\";\nimport morphdom from \"morphdom\";\nimport { set_state, state } from \"./state\";\n\ntype RenderFunc = (el: HTMLElement, state: object) => HTMLElement;\n\n\nfunction do_dialog(\n  dialog_name: string,\n  path: string,\n  render: RenderFunc\n) {\n  set_state(\n      {'selected': path}\n  );\n  const substate = get(state, path.substring(5));\n  console.log(\"SUBSTATE\", state, path, substate);\n\n  const dialog = document.getElementById(dialog_name);\n  if (dialog && dialog instanceof HTMLDialogElement) {\n      const clone = render(dialog, substate);\n      console.log(\"cloned\", dialog, clone);\n      morphdom(dialog, clone);\n      for (const d of dialog.querySelectorAll('form')) {\n        d.onsubmit = (event) => {\n            event.preventDefault();\n            if (event.target) {\n                let target = event.target as HTMLElement;\n                while (!(target instanceof HTMLDialogElement)) {\n                    if (target.parentNode) {\n                        target = target.parentNode as HTMLElement;\n                    } else {\n                        console.error(\"Dialog target not found\");\n                        return;\n                    }\n                }\n                target.close();\n            }\n        }\n      }\n      (dialog as HTMLDialogElement).showModal();\n      dialog.onclose = async (ev) => {\n          console.log(\"closing\", ev.target);\n          if (!ev.target) {\n              return;\n          }\n          let form;\n          const returnValue = (ev.target as HTMLDialogElement).returnValue;\n          if (returnValue) {\n              if (returnValue === \"cancel\") {\n                  set_state({ 'selected': undefined });\n                  return;\n              }\n              form = (ev.target as HTMLElement).querySelector(`form[name=${returnValue}]`);\n              if (!form) {\n                  form = (ev.target as HTMLElement).querySelector('form');\n              }\n          } else {\n              form = (ev.target as HTMLElement).querySelector('form');\n          }\n          if (form) {\n              const method = form.querySelector('input[name=\"method\"]');\n              if (method) {\n                  const args = {};\n                  for (const inp of form.querySelectorAll('input')) {\n                      args[inp.name] = inp.value;\n                  }\n                  console.log(\"calling method\", method.value, args);\n                  const got = get(state, args[\"path\"].substring(5));\n                  console.log(\"got\", got);\n                  delete args[\"method\"];\n                  delete args[\"path\"];\n                  const result = got[method.value].call(got, args);\n                  if (result instanceof Promise) {\n                      await result;\n                  }\n              } else {\n                  for (const inp of form.querySelectorAll('input')) {\n                      if (inp.name.substring(0, 9) === 'selected.') {\n                          const fullname = `${state['selected']}.${inp.name.substring(9)}`;\n                          console.log(\"setting\", fullname, inp.value);\n                          set(\n                              state,\n                              fullname.substring(5),\n                              inp.value);\n                      }\n                  }\n              }\n              set_state({ 'selected': undefined });\n          }\n      }\n  } else {\n    console.error(`Dialog ${dialog_name} not found.`);\n  }\n}\n\n\nexport { do_dialog };\n\n"],
  "mappings": "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",
  "names": ["set", "morphAttrs", "morphdom", "childrenOnly", "doc", "state", "import_object_path"]
}
